[
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/quick_start/nacos-discovery/",
	"title": "如何接入 Nacos 服务发现",
	"tags": [],
	"description": "",
	"content": " 项目说明 本项目演示如何使用 Nacos Discovery Starter 完成 Spring Cloud 应用的服务注册与发现。\nNacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n示例 如何接入 在启动示例进行演示之前，我们先了解一下 Spring Cloud 应用如何接入 Nacos Discovery。 注意 本章节只是为了便于您理解接入方式，本示例代码中已经完成接入工作，您无需再进行修改。\n 首先，修改 pom.xml 文件，引入 Nacos Discovery Starter。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  在应用的 /src/main/resources/application.properties 配置文件中配置 Nacos Server 地址\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8080  使用 @EnableDiscoveryClient 注解开启服务注册与发现功能\n@SpringBootApplication @EnableDiscoveryClient public class ProviderApplication { public static void main(String[] args) { SpringApplication.run(Application.class, args); } @RestController class EchoController { @RequestMapping(value = \u0026quot;/echo/{string}\u0026quot;, method = RequestMethod.GET) public String echo(@PathVariable String string) { return string; } } }   启动 Nacos Server  首先需要获取 Nacos Server，支持直接下载和源码构建两种方式。\n 直接下载：Nacos Server 下载页 源码构建：进入 Nacos Github 项目页面，将代码 git clone 到本地自行编译打包，参考此文档。推荐使用源码构建方式以获取最新版本  启动 Server，进入解压后文件夹或编译打包好的文件夹，找到如下相对文件夹 nacos/bin，并对照操作系统实际情况之下如下命令。\n Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standalone Windows 操作系统，执行命令 cmd startup.cmd   应用启动  增加配置，在 nacos-discovery-provider-example 项目的 /src/main/resources/application.properties 中添加基本配置信息\nspring.application.name=service-provider server.port=18082  启动应用，支持 IDE 直接启动和编译打包后启动。\n IDE直接启动：找到 nacos-discovery-provider-example 项目的主类 ProviderApplication，执行 main 方法启动应用。 打包编译后启动：在 nacos-discovery-provider-example 项目中执行 mvn clean package 将工程编译打包，然后执行 java -jar nacos-discovery-provider-example.jar启动应用。   验证 查询服务 在浏览器输入此地址 http://127.0.0.1:8080/nacos/v1/ns/instances?serviceName=service-provider，并点击跳转，可以看到服务节点已经成功注册到 Nacos Server。\n服务发现 集成 Ribbon 为了便于使用，NacosServerList 实现了 com.netflix.loadbalancer.ServerList 接口，并在 @ConditionOnMissingBean 的条件下进行自动注入。如果您有定制化的需求，可以自己实现自己的 ServerList。\nNacos Discovery Starter 默认集成了 Ribbon ，所以对于使用了 Ribbon 做负载均衡的组件，可以直接使用 Nacos 的服务发现。\n使用 RestTemplate 和 FeignClient 下面将分析 nacos-discovery-consumer-example 项目的代码，演示如何 RestTemplate 与 FeignClient。\n注意 本章节只是为了便于您理解接入方式，本示例代码中已经完成接入工作，您无需再进行修改。此处只涉及Ribbon、RestTemplate、FeignClient相关的内容，如果已经使用了其他服务发现组件，可以通过直接替换依赖来接入 Nacos Discovery。\n 添加 @LoadBlanced 注解，使得 RestTemplate 接入 Ribbon\n@Bean @LoadBalanced public RestTemplate restTemplate() { return new RestTemplate(); }  FeignClient 已经默认集成了 Ribbon ，此处演示如何配置一个 FeignClient。\n@FeignClient(name = \u0026quot;service-provider\u0026quot;) public interface EchoService { @RequestMapping(value = \u0026quot;/echo/{str}\u0026quot;, method = RequestMethod.GET) String echo(@PathVariable(\u0026quot;str\u0026quot;) String str); }  使用 @FeignClient 注解将 EchoService 这个接口包装成一个 FeignClient，属性 name 对应服务名 service-provider。\necho 方法上的 @RequestMapping 注解将 echo 方法与 URL \u0026ldquo;/echo/{str}\u0026rdquo; 相对应，@PathVariable 注解将 URL 路径中的 {str} 对应成 echo 方法的参数 str。\n 完成以上配置后，将两者自动注入到 TestController 中。\n@RestController public class TestController { @Autowired private RestTemplate restTemplate; @Autowired private EchoService echoService; @RequestMapping(value = \u0026quot;/echo-rest/{str}\u0026quot;, method = RequestMethod.GET) public String rest(@PathVariable String str) { return restTemplate.getForObject(\u0026quot;http://service-provider/echo/\u0026quot; + str, String.class); } @RequestMapping(value = \u0026quot;/echo-feign/{str}\u0026quot;, method = RequestMethod.GET) public String feign(@PathVariable String str) { return echoService.echo(str); } }  配置必要的配置，在 nacos-discovery-consumer-example 项目的 /src/main/resources/application.properties 中添加基本配置信息\nspring.application.name=service-consumer server.port=18083  启动应用，支持 IDE 直接启动和编译打包后启动。\n IDE直接启动：找到 nacos-discovery-consumer-example 项目的主类 ConsumerApplication，执行 main 方法启动应用。 打包编译后启动：在 nacos-discovery-consumer-example 项目中执行 mvn clean package 将工程编译打包，然后执行 java -jar nacos-discovery-consumer-example.jar启动应用。   验证  在流量器地址栏中输入 http://127.0.0.1:18083/echo-rest/1234，点击跳转，可以看到浏览器显示了 nacos-discovery-provider-example 返回的消息 \u0026ldquo;hello Nacos Discovery 1234\u0026rdquo;，证明服务发现生效。   在流量器地址栏中输入 http://127.0.0.1:18083/echo-feign/12345，点击跳转，可以看到浏览器显示 nacos-discovery-provider-example 返回的消息 \u0026ldquo;hello Nacos Discovery 12345\u0026rdquo;，证明服务发现生效。  原理 服务注册 Spring Cloud Nacos Discovery 遵循了 spring cloud common 标准，实现了 AutoServiceRegistration、ServiceRegistry、Registration 这三个接口。\n在 spring cloud 应用的启动阶段，监听了 ServletWebServerInitializedEvent 事件，当Web容器初始化完成后，即收到 ServletWebServerInitializedEvent 事件后，会触发注册的动作，调用 ServiceRegistry 的 register 方法，将服务注册到 Nacos Server。\n服务发现 NacosServerList 实现了 com.netflix.loadbalancer.ServerList 接口，并在 @ConditionOnMissingBean 的条件下进行自动注入，默认集成了Ribbon。\n如果需要有更加自定义的可以使用 @Autowired 注入一个 NacosRegistration 实例，通过其持有的 NamingService 字段内容直接调用 Nacos API。\nEndpoint 信息查看 Spring Boot 应用支持通过 Endpoint 来暴露相关信息，Nacos Discovery Starter 也支持这一点。\n在使用之前需要在 maven 中添加 spring-boot-starter-actuator依赖，并在配置中允许 Endpoints 的访问。\n Spring Boot 1.x 中添加配置 management.security.enabled=false Spring Boot 2.x 中添加配置 management.endpoints.web.exposure.include=*  Spring Boot 1.x 可以通过访问 http://127.0.0.1:18083/nacos_discovery 来查看 Nacos Endpoint 的信息。\nSpring Boot 2.x 可以通过访问 http://127.0.0.1:18083/actuator/nacos-discovery 来访问。\n如上图所示，NacosDiscoveryProperties 则为 Spring Cloud Nacos Discovery 本身的配置，也包括本机注册的内容，subscribe 为本机已订阅的服务信息。\nMore 更多配置项    配置项 key 默认值 说明     服务端地址 spring.cloud.nacos.discovery.server-addr     服务名 spring.cloud.nacos.discovery.service spring.application.name    权重 spring.cloud.nacos.discovery.weight 1 取值范围 1 到 100，数值越大，权重越大   网卡名 spring.cloud.nacos.discovery.network-interface  当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址   注册的IP地址 spring.cloud.nacos.discovery.ip  优先级最高   注册的端口 spring.cloud.nacos.discovery.port -1 默认情况下不用配置，会自动探测   命名空间 spring.cloud.nacos.discovery.namespace  常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。   AccessKey spring.cloud.nacos.discovery.access-key     SecretKey spring.cloud.nacos.discovery.secret-key     Metadata spring.cloud.nacos.discovery.metadata  使用Map格式配置   日志文件名 spring.cloud.nacos.discovery.log-name     接入点 spring.cloud.nacos.discovery.enpoint UTF-8 地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址   是否集成Ribbon ribbon.nacos.enabled true     更多介绍 Nacos为用户提供包括动态服务发现，配置管理，服务管理等服务基础设施，帮助用户更灵活，更轻松地构建，交付和管理他们的微服务平台，基于Nacos, 用户可以更快速的构建以“服务”为中心的现代云原生应用。Nacos可以和Spring Cloud、Kubernetes/CNCF、Dubbo 等微服务生态无缝融合，为用户提供更卓越的体验。更多 Nacos 相关的信息，请参考 Nacos 项目。\n如果您对 Spring Cloud Nacos Discovery 有任何建议或想法，欢迎在 issue 中或者通过其他社区渠道向我们提出。\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/roadmap/",
	"title": "路线图",
	"tags": [],
	"description": "",
	"content": " Spring Cloud Alibaba 致力于提供分布式应用服务开发的一站式解决方案。项目包含开发分布式应用服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n此项目包含的组件内容，主要选取自阿里巴巴开源中间件和阿里云商业化产品，但也不限定于这些产品。\n如果您对 Roadmap 有任何建议或想法，欢迎在 issue 中或者通过其他社区渠道向我们提出，一起讨论。\n已包含的组件 Sentinel 阿里巴巴开源产品，把流量作为切入点，从流量控制，熔断降级，系统负载保护等多个维度保护服务的稳定性。\nNacos 阿里巴巴开源产品，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\nAliyun OSS 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n即将加入的组件 Dubbo Apache Dubbo™ (incubating) 是一款高性能Java RPC框架。\nRocketMQ Apache RocketMQ™ 基于Java的高性能、高吞吐量的分布式消息和流计算平台。\nSchedulerx 阿里中间件团队开发的一款分布式任务调度产品，支持周期性的任务与固定时间点触发任务。\nAliCloud SLS 针对日志类数据的一站式服务，在阿里巴巴集团经历大量大数据场景锤炼而成。您无需开发就能快捷完成日志数据采集、消费、投递以及查询分析等功能，提升运维、运营效率，建立 DT 时代海量日志处理能力。\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/quick_start/nacos-config/",
	"title": "如何接入 Nacos 配置管理",
	"tags": [],
	"description": "",
	"content": " 项目说明 本项目演示如何使用 Nacos Config Starter 完成 Spring Cloud 应用的配置管理。\nNacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n示例 如何接入 在启动示例进行演示之前，我们先了解一下 Spring Cloud 应用如何接入 Nacos Config。 注意 本章节只是为了便于您理解接入方式，本示例代码中已经完成接入工作，您无需再进行修改。\n 首先，修改 pom.xml 文件，引入 Nacos Config Starter。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  在应用的 /src/main/resources/bootstrap.properties 配置文件中配置 Nacos Config 地址\nspring.cloud.nacos.config.server-addr=127.0.0.1:8080  完成上述两步后，应用会从 Nacos Config 中获取相应的配置，并添加在 Spring Environment 的 PropertySources 中。这里我们使用 @Value 注解来将对应的配置注入到 SampleController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能\n@RefreshScope class SampleController { @Value(\u0026quot;${user.name}\u0026quot;) String userName; @Value(\u0026quot;${user.age}\u0026quot;) int age; }   启动 Nacos Server 并添加配置  首先需要获取 Nacos Server，支持直接下载和源码构建两种方式。推荐使用最新版本 Nacos Server\n 直接下载：Nacos Server 下载页 源码构建：进入 Nacos Github 项目页面，将代码 git clone 到本地自行编译打包，参考此文档。   启动 Server，进入下载到本地并解压完成后的文件夹(使用源码构建的方式则进入编译打包好的文件夹)，再进去其相对文件夹 nacos/bin，并对照操作系统实际情况执行如下命令。详情参考此文档。\n Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standalone Windows 操作系统，执行命令 cmd startup.cmd  在命令行执行如下命令，向 Nacos Server 中添加一条配置。\ncurl -X POST \u0026quot;http://127.0.0.1:8080/nacos/v1/cs/configs?dataId=nacos-config-example.properties\u0026amp;group=DEFAULT_GROUP\u0026amp;content=user.id=1%0Auser.name=james%0Auser.age=17\u0026quot;  注：你也可以使用其他方式添加，遵循 HTTP API 规范即可，若您使用的 Nacos 版本自带控制台，建议直接使用控制台进行配置\n添加的配置的详情如下\ndataId 为 nacos-config-example.properties group 为 DEFAULT_GROUP 内容如下 user.id=1 user.name=james user.age=17   应用启动  增加配置，在应用的 /src/main/resources/application.properties 中添加基本配置信息\nspring.application.name=nacos-config-example server.port=18084  启动应用，支持 IDE 直接启动和编译打包后启动。\n IDE直接启动：找到主类 Application，执行 main 方法启动应用。 打包编译后启动：首先执行 mvn clean package 将工程编译打包，然后执行 java -jar nacos-config-example.jar启动应用。   验证 验证自动注入 在浏览器地址栏输入 http://127.0.0.1:18084/user，并点击调转，可以看到成功从 Nacos Config Server 中获取了数据。\n验证动态刷新  执行如下命令，修改 Nacos Server 端的配置数据\ncurl -X POST \u0026quot;http://127.0.0.1:8080/nacos/v1/cs/configs?dataId=nacos-config-example.properties\u0026amp;group=DEFAULT_GROUP\u0026amp;content=user.id=1%0Auser.name=james%0Auser.age=18\u0026quot;  在浏览器地址栏输入 http://127.0.0.1:18084/user，并点击调转，可以看到应用从 Nacos Server 中获取了最新的数据，age 变成了 18。\n  原理 Nacos Config 数据结构 Nacos Config 主要通过 dataId 和 group 来唯一确定一条配置，我们假定你已经了解此背景。如果不了解，请参考 Nacos 文档。\nNacos Client 从 Nacos Server 端获取数据时，调用的是此接口 ConfigService.getConfig(String dataId, String group, long timeoutMs)。\nSpring Cloud 应用获取数据 dataID 在 Nacos Config Starter 中，dataId 的拼接格式如下\n${prefix} - ${spring.active.profile} . ${content-type}   prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。\n spring.active.profile 即为当前环境对应的 profile，详情可以参考 Spring Boot文档\n注意，当 activeprofile 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${context.type}\n content-type 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.content-type来配置。 目前只支持 properties 类型。\n  group  group 默认为 DEFAULT_GROUP，可以通过 spring.cloud.nacos.config.group 配置。  自动注入 Nacos Config Starter 实现了 org.springframework.cloud.bootstrap.config.PropertySourceLocator接口，并将优先级设置成了最高。\n在 Spring Cloud 应用启动阶段，会主动从 Nacos Server 端获取对应的数据，并将获取到的数据转换成 PropertySource 且注入到 Environment 的 PropertySources 属性中，所以使用 @Value 注解也能直接获取 Nacos Server 端配置的内容。\n动态刷新 Nacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.ContextRefresher 的 refresh 方法 。\n如果需要对 Bean 进行动态刷新，请参照 Spring 和 Spring Cloud 规范。推荐给类添加 @RefreshScope 或 @ConfigurationProperties 注解，\n更多详情请参考 ContextRefresher Java Doc。\nEndpoint 信息查看 Spring Boot 应用支持通过 Endpoint 来暴露相关信息，Nacos Config Starter 也支持这一点。\n在使用之前需要在 maven 中添加 spring-boot-starter-actuator依赖，并在配置中允许 Endpoints 的访问。\n Spring Boot 1.x 中添加配置 management.security.enabled=false Spring Boot 2.x 中添加配置 management.endpoints.web.exposure.include=*  Spring Boot 1.x 可以通过访问 http://127.0.0.1:18084/nacos_config 来查看 Nacos Endpoint 的信息。\nSpring Boot 2.x 可以通过访问 http://127.0.0.1:18084/actuator/nacos-config 来访问。\n如上图所示，Sources 表示此客户端从哪些 Nacos Config 配置项中获取了信息，RefreshHistory 表示动态刷新的历史记录，最多保存20条，NacosConfigProperties 则为 Nacos Config Starter 本身的配置。\nMore 更多配置项    配置项 key 默认值 说明     服务端地址 spring.cloud.nacos.config.server-addr     DataId前缀 spring.cloud.nacos.config.prefix  spring.application.name   Group spring.cloud.nacos.config.group DEFAULT_GROUP    dataID后缀及数据格式 spring.cloud.nacos.config.content-type properties 目前只支持 properties   配置内容的编码方式 spring.cloud.nacos.config.encode UTF-8 配置的编码   获取配置的超时时间 spring.cloud.nacos.config.timeout 3000 单位为 ms   配置的命名空间 spring.cloud.nacos.config.namespace  常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源隔离等。   AccessKey spring.cloud.nacos.config.access-key     SecretKey spring.cloud.nacos.config.secret-key     相对路径 spring.cloud.nacos.config.context-path  服务端 API 的相对路径   接入点 spring.cloud.nacos.config.endpoint UTF-8 地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址   是否开启监听和自动刷新 spring.cloud.nacos.config.refresh.enabled true     更多介绍 Nacos为用户提供包括动态服务发现，配置管理，服务管理等服务基础设施，帮助用户更灵活，更轻松地构建，交付和管理他们的微服务平台，基于Nacos, 用户可以更快速的构建以“服务”为中心的现代云原生应用。Nacos可以和Spring Cloud、Kubernetes/CNCF、Dubbo 等微服务生态无缝融合，为用户提供更卓越的体验。更多 Nacos 相关的信息，请参考 Nacos 项目。\n如果您对 Spring Cloud Nacos Config Starter 有任何建议或想法，欢迎在 issue 中或者通过其他社区渠道向我们提出。\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/quick_start/",
	"title": "快速开始",
	"tags": [],
	"description": "",
	"content": "本栏目主要介绍如何开始使用 spring cloud alibaba\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/quick_start/alicloud-storage/",
	"title": "如何接入 阿里云 OSS",
	"tags": [],
	"description": "",
	"content": " 项目说明 如果您的应用是 Spring Cloud 应用，且需要使用阿里云的 OSS 服务进行云端的文件存储，例如电商业务中常见的商品图片存储，那么您可以使用 OSS starter 完成 Spring Cloud 应用的对象存储。\n阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。更多 OSS 相关的信息，请参考 OSS官网。\n示例 接入 OSS 在启动示例进行演示之前，我们先了解一下如何接入 OSS。\n注意：本节只是为了便于您理解接入方式，本示例代码中已经完成接入工作，您只需修改 accessKeyId、secretAccessKey、region 即可。\n 修改 pom.xml 文件，引入 alibaba-storage starter。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-storage\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  在配置文件中配置 OSS 服务对应的 accessKeyId、secretAccessKey 和 region。\n// application.properties spring.cloud.alibaba.oss.accessKeyId=your-ak spring.cloud.alibaba.oss.secretAccessKey=your-sk spring.cloud.alibaba.oss.region=cn-beijing  以阿里云 accessKeyId、secretAccessKey 为例，获取方式如下。\ni. 在阿里云控制台界面，单击右上角头像，选择 accesskeys，或者直接登录用户信息管理界面：\nii. 获取 accessKeyId、secretAccessKey：\n  注意：如果您使用了阿里云 STS服务 进行短期访问权限管理，则除了 accessKeyId、secretAccessKey、region 以外，还需配置 securityToken。\n 注入 OSSClient 并进行文件上传下载等操作。\n@Service public class YourService { @Autowired private OSSClient ossClient; public void saveFile() { // download file to local ossClient.getObject(new GetObjectRequest(bucketName, objectName), new File(\u0026quot;pathOfYourLocalFile\u0026quot;)); } }   说明：直接注入OSSClient 方式通常用于大量文件对象操作的场景。如果仅仅是需要读取文件对象内容，OSS Starter 也支持以 Resource 方式读取文件，详情请参考下文。\n启动应用  在应用的 /src/main/resources/application.properties 中添加基本配置信息和 OSS 配置。\nspring.application.name=oss-example server.port=18084 spring.cloud.alibaba.oss.accessKeyId=your-ak spring.cloud.alibaba.oss.secretAccessKey=your-sk spring.cloud.alibaba.oss.region=cn-beijing  通过 IDE 直接启动或者编译打包后启动应用。\n IDE直接启动：找到主类 OSSApplication，执行 main 方法启动应用。 打包编译后启动：  执行 mvn clean package 将工程编译打包； 执行 java -jar oss-example.jar启动应用。     应用启动后会自动在 OSS 上创建一个名为 spring-cloud-alibaba 的 Bucket。\n上传或下载文件 上传文件 使用 curl 调用上传接口 upload。该接口会上传 classpath 下的的 oss-test.json 文件。文件内容是一段 json:\ncurl http://localhost:18084/upload  显示结果：\n// 如果配置正确，则输出 upload success // 如果上传的过程中发生异常，则会输出 upload fail: fail reason。比如accessKeyId配置错误的时候，fail reason内容如下 upload fail: The OSS Access Key Id you provided does not exist in our records. [ErrorCode]: InvalidAccessKeyId [RequestId]: RequestId [HostId]: xxx.oss-cn-beijing.aliyuncs.com [ResponseError]: InvalidAccessKeyId The OSS Access Key Id you provided does not exist in our records. RequestId xxx.oss-cn-beijing.aliyuncs.com xxx-accessKeyId  下载文件 使用 curl 调用下载接口 download。该接口会下载刚才用 upload 接口上传的 oss-test.json 文件，并打印文件内容到结果中:\ncurl http://localhost:18084/download  显示结果：\n// 如果配置正确，则输出 download success, content: { \u0026quot;name\u0026quot;: \u0026quot;spring-cloud-alibaba\u0026quot;, \u0026quot;github\u0026quot;: \u0026quot;https://github.com/spring-cloud-incubator/spring-cloud-alibaba\u0026quot;, \u0026quot;authors\u0026quot;: [\u0026quot;Jim\u0026quot;, \u0026quot;flystar32\u0026quot;], \u0026quot;emails\u0026quot;: [\u0026quot;fangjian0423@gmail.com\u0026quot;, \u0026quot;flystar32@163.com\u0026quot;] } // 下载的过程中如果发生异常，则会输出download fail: fail reason。比如accessKeyId配置错误，则fail reason内容如下 download fail: The OSS Access Key Id you provided does not exist in our records. [ErrorCode]: InvalidAccessKeyId [RequestId]: RequestId [HostId]: xxx.oss-cn-beijing.aliyuncs.com [ResponseError]: InvalidAccessKeyId The OSS Access Key Id you provided does not exist in our records. RequestId sxxx.oss-cn-beijing.aliyuncs.com xxx-accessKeyId  在 OSS 上验证结果 完成文件上传或者下载操作后，可以登录 OSS 控制台进行验证。\n 登陆OSS控制台，可以看到左侧 Bucket 列表新增一个名字为spring-cloud-alibaba的 Bucket。   单击spring-cloud-alibaba Bucket，选择 文件管理 页签，发现上传的 oss-test 文件在 custom-dir 目录中。上传的 objectName 为custom-dir/oss-test。目录和文件以\u0026rsquo;/\u0026lsquo;符号分割。  查看 Endpoint 信息 Spring Boot 应用支持通过 Endpoint 来暴露相关信息，OSS Starter 也支持这一点。\n前提条件：\n在 maven 中添加 spring-boot-starter-actuator依赖，并在配置中允许 Endpoints 的访问。\n Spring Boot1.x 中添加配置 management.security.enabled=false Spring Boot2.x 中添加配置 management.endpoints.web.exposure.include=*  Spring Boot1.x 可以通过访问 http://127.0.0.1:18084/oss 来查看 OSS Endpoint 的信息。\nSpring Boot2.x 可以通过访问 http://127.0.0.1:18084/acutator/oss 来访问。\nEndpoint 内部会显示所有的 OSSClient 配置信息，以及该 OSSClient 对应的 Bucket 列表。\n多个 OSSClient 场景 如果您需要配置多个 OSSClient，类似多数据源的配置，则可以先构造 OSSProperties，再构造 OSSClient，并分别为每个 OSSClient 配置相应的 accessKeyId、secretAccessKey 等信息。\n @Bean @ConfigurationProperties(prefix = \u0026quot;spring.cloud.alibaba.oss1\u0026quot;) public OSSProperties ossProperties1() { return new OSSProperties(); } @Bean public OSS ossClient1(@Qualifier(\u0026quot;ossProperties1\u0026quot;) OSSProperties ossProperties) { return new OSSClientBuilder().build(ossProperties.getEndpoint(), ossProperties.getAccessKeyId(), ossProperties.getSecretAccessKey(), ossProperties.getSecurityToken(), ossProperties.getConfiguration()); }  以 Resource 的形式读取文件  OSS Starter 支持以 Resource 的形式得到文件对象。如果只需读取少量文件，您可以使用这种方式。\n使用方法：\n只需配置 OSS 协议对应的 Resource 即可：\n @Value(\u0026quot;oss://spring-cloud-alibaba/oss-test\u0026quot;) private Resource file; // 文件内容的读取 StreamUtils.copyToString(file.getInputStream(), Charset.forName(CharEncoding.UTF_8))  关闭 OSSClient 服务 如果您不再需要 OSS 服务，您也无需手动关闭 OSSClient。在 ApplicationContext close 的时候，OSS Starter 会在 OSSApplicationListener 中调用所有 OSSClient 的 shutdown 方法。\n如果您对 Spring Cloud OSS Starter 有任何建议或想法，欢迎提交 issue 中或者通过其他社区渠道向我们反馈。\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/",
	"title": "Spring Cloud Alibaba",
	"tags": [],
	"description": "",
	"content": " Spring Cloud Alibaba 致力于提供分布式应用服务开发的一站式解决方案。此项目包含开发分布式应用服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里分布式应用解决方案，通过阿里中间件来迅速搭建分布式应用系统。\n主要功能  服务限流降级：默认支持为 HTTP 服务的提供限流保护，也支持添加注解实现方法的自定义限流降级，且支持动态修改限流降级规则。 服务注册与发现：适配 sprig cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。 分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。 阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。  更多功能请参考 Roadmap。\n组件: Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。\nNacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\nAliCloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n更多组件请参考 Roadmap。\n如何构建  master 分支对应的是 Spring Boot 2.x，最低支持 JDK 1.8。 1.x 分支对应的是 Spring Boot 1.x，最低支持 JDK 1.7。  Spring Cloud 使用 Maven 来构建，最快的使用方式是将本项目clone到本地，然后执行以下命令：\n./mvnw install  执行完毕后，项目将被安装到本地 Maven 仓库。\n如何使用 为了演示如何使用，Spring Cloud Alibaba 项目包含了一个子模块spring-cloud-alibaba-examples。此模块中提供了演示用的 example ，您可以阅读对应的 example 工程下的 readme 文档，根据里面的步骤来体验。\nExample 列表：\nsentinel example\nNacos Config Example\nNacos Discovery Example\nAliCloud OSS Example\n版本管理规范 项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从0开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用0，即版本号为 0.x.x 的格式。\n由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此我们使用了两个不同分支来分别支持 Spring Boot 1 和 Spring Boot 2:\n 0.1.x 版本适用于 Spring Boot 1 0.2.x 版本适用于 Spring Boot 2  项目孵化阶段，项目版本升级机制如下：\n 功能改动的升级会增加第三位版本号的数值，例如 0.1.0 的下一个版本为0.1.1。  社区交流 邮件列表 spring-cloud-alibaba@googlegroups.com，欢迎通过此邮件列表讨论与 spring-cloud-alibaba 相关的一切。\n钉钉群 "
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/quick_start/sentinel/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "_index.zh-cn.md\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/zh-cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]