[
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/nacos-discovery/",
	"title": "Nacos Discovery Example",
	"tags": [],
	"description": "",
	"content": " Project Instruction This example illustrates how to use Nacos Discovery Starter implement Service discovery for Spring Cloud applications.\nNacos an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications.\nDemo Connect to Nacos Discovery Before we start the demo, let\u0026rsquo;s learn how to connect Nacos Config to a Spring Cloud application. Note: This section is to show you how to connect to Nacos Discovery. The configurations have been completed in the following example, so you don\u0026rsquo;t need modify the code any more.\n Add dependency spring-cloud-starter-alibaba-nacos-discovery in the pom.xml file in your Spring Cloud project.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  Add Nacos server address configurations to file /src/main/resources/application.properties.\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8080  Use the @EnableDiscoveryClient annotation to turn on service registration and discovery.\n@SpringBootApplication @EnableDiscoveryClient public class ProviderApplication { public static void main(String[] args) { SpringApplication.run(Application.class, args); } @RestController class EchoController { @RequestMapping(value = \u0026quot;/echo/{string}\u0026quot;, method = RequestMethod.GET) public String echo(@PathVariable String string) { return string; } } }   Start Nacos Server  Install Nacos Server by downloading or build from source code.Recommended latest version Nacos Server\n Download: Download Nacos Server download page Build from source code: Get source code by git clone git@github.com:alibaba/Nacos.git from Github Nacos and build your code. See build reference for details.   Unzip the downloaded file and go to the nacos/bin folder(), And according to the actual situation of the operating system, execute the following command。see reference for more detail。\n Linux/Unix/Mac , execute sh startup.sh -m standalone Windows , execute cmd startup.cmd   Start Application  Add necessary configurations to project nacos-discovery-provider-example, file /src/main/resources/application.properties.\nspring.application.name=service-provider server.port=18082  Start the application in IDE or by building a fatjar.\n Start in IDE: Find main class ProviderApplication in project nacos-discovery-provider-example, and execute the main method. Build a fatjar：Execute command mvn clean package in project nacos-discovery-provider-example to build a fatjar，and run command java -jar nacos-discovery-provider-example.jar to start the application.   Verification Query Service Enter http://127.0.0.1:8080/nacos/v1/ns/instances?serviceName=service-provider in the browser address bar and click Go to, we can see that the service node has been successfully registered to Nacos Server.\nService Discovery Integration Ribbon For ease of use, NacosServerList implements the com.netflix.loadbalancer.ServerList interface and auto-injects under the @ConditionOnMissingBean condition. If you have customized requirements, you can implement your own ServerList yourself.\nNacos Discovery Starter integrates Ribbon by default, so for components that use Ribbon for load balancing, you can use Nacos Service discovery directly.\nUse RestTemplate and FeignClient The code of nacos-discovery-consumer-example project will be analyzed below, demonstrating how RestTemplate and FeignClient.\nNote This section is to show you how to connect to Nacos Discovery. The configurations have been completed in the following example, so you don\u0026rsquo;t need modify the code any more.Only the contents related to Ribbon, RestTemplate, and FeignClient are involved here. If other service discovery components have been used, you can access Nacos Discovery by directly replacing the dependencies.\n Add the @LoadBlanced annotation to make RestTemplate accessible to the Ribbon\n@Bean @LoadBalanced public RestTemplate restTemplate() { return new RestTemplate(); }  FeignClient has integrated the Ribbon by default, which shows how to configure a FeignClient.\n@FeignClient(name = \u0026quot;service-provider\u0026quot;) public interface EchoService { @RequestMapping(value = \u0026quot;/echo/{str}\u0026quot;, method = RequestMethod.GET) String echo(@PathVariable(\u0026quot;str\u0026quot;) String str); }  Use the @FeignClient annotation to wrap the EchoService interface as a FeignClient with the attribute name corresponding to the service name service-provider.\nThe @RequestMapping annotation on the echo method corresponds the echo method to the URL /echo/{str}, and the @PathVariable annotation maps {str} in the URL path to the argument str of the echo method.\n After completing the above configuration, injected them into the TestController.\n@RestController public class TestController { @Autowired private RestTemplate restTemplate; @Autowired private EchoService echoService; @RequestMapping(value = \u0026quot;/echo-rest/{str}\u0026quot;, method = RequestMethod.GET) public String rest(@PathVariable String str) { return restTemplate.getForObject(\u0026quot;http://service-provider/echo/\u0026quot; + str, String.class); } @RequestMapping(value = \u0026quot;/echo-feign/{str}\u0026quot;, method = RequestMethod.GET) public String feign(@PathVariable String str) { return echoService.echo(str); } }  Add necessary configurations to project nacos-discovery-consumer-example file /src/main/resources/application.properties.\nspring.application.name=service-consumer server.port=18083  Start the application in IDE or by building a fatjar.\n Start in IDE: Find main class ConsumerApplication in project nacos-discovery-consumer-example, and execute the main method. Build a fatjar：Execute command mvn clean package in project nacos-discovery-consumer-example to build a fatjar，and run command java -jar nacos-discovery-consumer-example.jar to start the application.   Verification  Enter http://127.0.0.1:18083/echo-rest/1234 in the browser address bar and click Go to, we can see that the browser displays the message \u0026ldquo;hello Nacos Discovery 1234\u0026rdquo; returned by nacos-discovery-provider-example to prove that the service discovery is in effect.   Enter http://127.0.0.1:18083/echo-feign/12345 in the browser address bar and click Go to, we can see that the browser displays the message \u0026ldquo;hello Nacos Discovery 12345\u0026rdquo; returned by nacos-discovery-provider-example to prove that the service discovery is in effect.  Principle Service Registry Spring Cloud Nacos Discovery follows the spring cloud common standard and implements three interfaces: AutoServiceRegistration, ServiceRegistry, and Registration.\nDuring the startup phase of the spring cloud application, the ServletWebServerInitializedEvent event is watched. When the ServletWebServerInitializedEvent event is received after the Web container is initialized, the registration action is triggered, and the ServiceRegistry register method is called to register the service to the Nacos Server.\nService Discovery NacosServerList implements the com.netflix.loadbalancer.ServerList  interface and auto-injects it under @ConditionOnMissingBean. The ribbon is integrated by default.\nIf you need to be more customizable, you can use @Autowired to inject a NacosRegistration bean and call the Nacos API directly through the contents of the NamingService field it holds.\nEndpoint Nacos Discovery Starter also supports the implementation of Spring Boot actuator endpoints.\nPrerequisite:\nAdd dependency spring-boot-starter-actuator to your pom.xml file, and configure your endpoint security strategy.\nSpring Boot 1.x: Add configuration management.security.enabled=false Spring Boot 2.x: Add configuration management.endpoints.web.exposure.include=* To view the endpoint information, visit the following URLS:\nSpring Boot1.x: Nacos Discovery Endpoint URL is http://127.0.0.1:18083/nacos_discovery. Spring Boot2.x: Nacos Discovery Endpoint URL is http://127.0.0.1:18083/actuator/nacos-discovery.\nAs shown in the figure above, NacosDiscoveryProperties is the configuration of Nacos Discovery itself, and also includes the contents registered by the application, subscribe is the service information that the application has subscribed to.\nMore More configuration items    Configuration item key default value Description     server address spring.cloud.nacos.discovery.server-addr     service spring.cloud.nacos.discovery.service spring.application.name service id to registry   weight spring.cloud.nacos.discovery.weight 1 value from 1 to 100, The larger the value, the larger the weight   ip spring.cloud.nacos.discovery.ip  ip address to registry, Highest priority   network interface spring.cloud.nacos.discovery.network-interface  When the IP is not configured, the registered IP address is the IP address corresponding to the network-interface. If this item is not configured, the address of the first network-interface is taken by default.   port spring.cloud.nacos.discovery.port -1 port to registry, Automatically detect without configuration   namesapce spring.cloud.nacos.discovery.namespace  One of the common scenarios is the separation of the configuration of different environments, such as the development of the test environment and the resource isolation of the production environment.   AccessKey spring.cloud.nacos.discovery.access-key     SecretKey spring.cloud.nacos.discovery.secret-key     Metadata spring.cloud.nacos.discovery.metadata  Extended data, Configure using Map format   log name spring.cloud.nacos.discovery.log-name     endpoint spring.cloud.nacos.discovery.enpoint  The domain name of a service, through which the server address can be dynamically obtained.   Integration Ribbon ribbon.nacos.enabled true     More introduction Nacos  is committed to help you discover, configure, and manage your microservices. It provides a set of simple and useful features enabling you to realize dynamic service discovery, service configuration, service metadata and traffic management.\nNacos makes it easier and faster to construct, deliver and manage your microservices platform. It is the infrastructure that supports a service-centered modern application architecture with a microservices or cloud-native approach.\nIf you have any ideas or suggestions for Nacos Discovery starter, please don\u0026rsquo;t hesitate to tell us by submitting github issues.\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": " Spring Cloud Alibaba provides a one-stop solution for distributed application development. It contains all the components required to develop distributed applications, making it easy for you to develop your applications using Spring Cloud.\nThis project contains components from both open-source and commercialized Alibaba middleware products，but are not limited to them.\nIf you have any suggestions on our roadmap, feel free to submit issues or contact us via the other channels.\nComponents Sentinel\nAn open-source project of Alibaba, Sentinel takes \u0026ldquo;flow\u0026rdquo; as breakthrough point, and provides solutions in areas such as flow control, concurrency, circuit breaking, and load protection to protect service stability.\nNacos\nAn opensource project of Alibaba, an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications.\nAliCloud OSS\nAliCloud Object Storage Service, An encrypted and secure cloud storage service which stores, processes and accesses massive amounts of data from anywhere in the world.\nMore components will be supported by Spring Cloud Alibaba in the future, which may include but are not limited to the following:\nDubbo Apache Dubbo™ (incubating) is a high-performance, Java based open source RPC framework.\nRocketMQ Apache RocketMQ™ is an open source distributed messaging and streaming data platform.\nSchedulerx A distributed task scheduling product developed by Alibaba Middleware team. It supports both periodical tasks and tasks to be triggered at specified time points.\nAliCloud SLS Aliyun Log Service is an all-in-one service for log-type data. It helps increase Operations \u0026amp; Management and operational efficiency, as well as build the processing capability to deal with massive logs.\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/nacos-config/",
	"title": "Nacos Config Example",
	"tags": [],
	"description": "",
	"content": " Project Instruction This example illustrates how to use Nacos Config Starter implement externalized configuration for Spring Cloud applications.\nNacos an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications.\nDemo Connect to Nacos Config Before we start the demo, let\u0026rsquo;s learn how to connect Nacos Config to a Spring Cloud application. Note: This section is to show you how to connect to Nacos Config. The configurations have been completed in the following example, so you don\u0026rsquo;t need modify the code any more.\n Add dependency spring-cloud-starter-alibaba-nacos-config in the pom.xml file in your Spring Cloud project.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  Add Nacos server address configurations to file /src/main/resources/bootstrap.properties\nspring.cloud.nacos.config.server-addr=127.0.0.1:8080  After completing the above two steps, the application will get the externalized configuration from Nacos Server and put it in the Spring Environment\u0026rsquo;s PropertySources.We use the @Value annotation to inject the corresponding configuration into the userName and age fields of the SampleController, and add @RefreshScope to turn on dynamic refresh .\n@RefreshScope class SampleController {\n @Value(\u0026quot;${user.name}\u0026quot;) String userName; @Value(\u0026quot;${user.age}\u0026quot;) int age; }   Start Nacos Server  Install Nacos Server by downloading or build from source code.Recommended latest version Nacos Server\n Download: Download Nacos Server download page Build from source code: Get source code by git clone git@github.com:alibaba/Nacos.git from Github Nacos and build your code. See build reference for details.   Unzip the downloaded file and go to the nacos/bin folder(), And according to the actual situation of the operating system, execute the following command。see reference for more detail。\n Linux/Unix/Mac , execute sh startup.sh -m standalone Windows , execute cmd startup.cmd  Execute the following command to add a configuration to Nacos Server.\ncurl -X POST \u0026quot;http://127.0.0.1:8080/nacos/v1/cs/configs?dataId=nacos-config-example.properties\u0026amp;group=DEFAULT_GROUP\u0026amp;content=user.id=1%0Auser.name=james%0Auser.age=17\u0026quot;  Note: You can also add it in other ways. If you are using the Nacos version with its own console, it is recommended to configure it directly using the console.\nDetails of the added configuration are as follows\ndataId is nacos-config-example.properties group is DEFAULT_GROUP content is user.id=1 user.name=james user.age=17   Start Application  Add necessary configurations to file /src/main/resources/application.properties\nspring.application.name=nacos-config-example server.port=18084  Start the application in IDE or by building a fatjar.\n Start in IDE: Find main class Application, and execute the main method. Build a fatjar：Execute command mvn clean package to build a fatjar，and run command java -jar nacos-config-example.jar to start the application.   Verification Automatic Injection Enter http://127.0.0.1:18084/user in the browser address bar and click Go to, we can see the data successfully obtained from Nacos Config Server.\nDynamic Refresh  Run the following command to modify the configuration data on the Nacos Server side.\ncurl -X POST \u0026quot;http://127.0.0.1:8080/nacos/v1/cs/configs?dataId=nacos-config-example.properties\u0026amp;group=DEFAULT_GROUP\u0026amp;content=user.id=1%0Auser.name=james%0Auser.age=18\u0026quot;  Enter http://127.0.0.1:18084/user in the browser address bar and click Go to, We can see that the app got the latest data from Nacos Server and the age becomes 18.\n  Principle Nacos Config Data Structure Nacos Config primarily determines a piece of config through dataId and group, and we assume that you already know this background. If you don\u0026rsquo;t understand, please refer to Nacos Doc。\nNacos Client gets data from Nacos Server through this method. ConfigService.getConfig(String dataId, String group, long timeoutMs)。\nSpring Cloud Retrieve Data dataID In Nacos Config Starter, the splicing format of dataId is as follows\n${prefix} - ${spring.active.profile} . ${content-type}   prefix default value is spring.application.name value, which can also be configured via the configuration item spring.cloud.nacos.config.prefix.\n spring.active.profile is the profile corresponding to the current environment. For details, please refer to Spring Boot Doc\nNote: when the activeprofile is empty, the corresponding connector - will also not exist, and the splicing format of the dataId becomes ${prefix}.${context.type}\n content-type is the data format of the configuration content, which can be configured by the configuration item spring.cloud.nacos.config.content-type. Currently only the properties type is supported.\n  group  group defaults to DEFAULT_GROUP and can be configured via spring.cloud.nacos.config.group.  Automatic Injection Nacos Config Starter implement org.springframework.cloud.bootstrap.config.PropertySourceLocator interface, and set order to 0.\nIn the startup phase of the Spring Cloud application, the corresponding data is obtained from the Nacos Server side, and the acquired data is converted into a PropertySource and injected into the PropertySources property of the Spring Environment. so the @Value annotation can also directly obtain the configuration of the Nacos Server side.\nDynamic Refresh By default, Nacos Config Starter adds a listening function to all Nacos configuration items that have successfully acquired data. It will trigger org.springframework.cloud.context.refresh.ContextRefresher \u0026rsquo;s refresh method in real time when it detects changes in the server configuration.\nIf you need to dynamically refresh a bean, please refer to the Spring and Spring Cloud specifications. It is recommended to add @RefreshScope or @ConfigurationProperties annotations to the class.\nPlease refer toContextRefresher Java Doc for more details.\nEndpoint Nacos Config starter also supports the implementation of Spring Boot actuator endpoints.\nPrerequisite:\nAdd dependency spring-boot-starter-actuator to your pom.xml file, and configure your endpoint security strategy.\nSpring Boot 1.x: Add configuration management.security.enabled=false Spring Boot 2.x: Add configuration management.endpoints.web.exposure.include=* To view the endpoint information, visit the following URLS:\nSpring Boot1.x: Nacos Config Endpoint URL is http://127.0.0.1:18083/nacos_config. Spring Boot2.x: Nacos Config Endpoint URL is http://127.0.0.1:18083/actuator/nacos-config.\nAs shown in the figure above, Sources indicates which Nacos Config configuration items the client has obtained information, RefreshHistory indicates the dynamic refresh history, and up to 20, and NacosConfigProperties is the configuration of Nacos Config Starter itself.\nMore More configuration items    Configuration item key default value Description     server address spring.cloud.nacos.config.server-addr     DataId prefix spring.cloud.nacos.config.prefix  spring.application.name   Group spring.cloud.nacos.config.group DEFAULT_GROUP    dataID content type spring.cloud.nacos.config.content-type properties currently only support properties   encoding spring.cloud.nacos.config.encode UTF-8 Content encoding   timeout spring.cloud.nacos.config.timeout 3000 Get the configuration timeout period,unit is ms   namespace spring.cloud.nacos.config.namespace  One of the common scenarios is the separation of the configuration of different environments, such as the development of the test environment and the resource isolation of the production environment.   AccessKey spring.cloud.nacos.config.access-key     SecretKey spring.cloud.nacos.config.secret-key     context-path spring.cloud.nacos.config.context-path  Relative path of the server API   endpoint spring.cloud.nacos.config.endpoint UTF-8 The domain name of a service, through which the server address can be dynamically obtained.   refresh spring.cloud.nacos.config.refresh.enabled true enable auto refresh    More introduction Nacos is committed to help you discover, configure, and manage your microservices. It provides a set of simple and useful features enabling you to realize dynamic service discovery, service configuration, service metadata and traffic management.\nNacos makes it easier and faster to construct, deliver and manage your microservices platform. It is the infrastructure that supports a service-centered modern application architecture with a microservices or cloud-native approach.\nIf you have any ideas or suggestions for Nacos Config starter, please don\u0026rsquo;t hesitate to tell us by submitting github issues.\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/",
	"title": "Quick Start",
	"tags": [],
	"description": "",
	"content": "this chapter will show how to use spring cloud alibaba\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/alicloud-storage/",
	"title": "Alicloud Storage Example",
	"tags": [],
	"description": "",
	"content": " Introduction If your applications are Spring Cloud applications and you need to use Alibaba Cloud\u0026rsquo;s OSS service for file storage (for example, storing commodity image for your e-commerce business), you can use OSS starter. This topic provides an example to illustrate how to use OSS starter to implement object storage for Spring Cloud applications.\nAlibaba Cloud Object Storage Service (OSS) is an encrypted, secure, cost-effective, and easy-to-use object storage service that enables you to store, back up, and archive large amounts of data in the cloud.\nDemo Connect to OSS Before we start the demo, let\u0026rsquo;s learn how to connect OSS to a Spring Cloud application. Note: This section is to show you how to connect to oss. The actual configurations have been completed in the following example, and you only need to specify your accessKeyId, secretAccessKey and region.\n Add dependency spring-cloud-starter-alibaba-storage in the pom.xml file in your Spring Cloud project.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-storage\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;  Configure accessKeyId, secretAccessKey and region in application.properties.\n// application.properties spring.cloud.alibaba.oss.accessKeyId=your-ak spring.cloud.alibaba.oss.secretAccessKey=your-sk spring.cloud.alibaba.oss.region=cn-beijing  To get accessKeyId, secretAccessKey, follow these steps:\n On the Alibaba Cloud console, click your avatar on the upper-right corner and click accesskeys. Or visit User Management page directly：    Get your accessKeyId、secretAccessKey：  Note: If you are using STS, you should configure securityToken in addition to accessKeyId, secretAccessKey, and region.\n Inject OSSClient and use it to upload files to the OSS server and download a file from OSS server.\n@Service public class YourService { @Autowired private OSSClient ossClient; public void saveFile() { // download file to local ossClient.getObject(new GetObjectRequest(bucketName, objectName), new File(\u0026quot;pathOfYourLocalFile\u0026quot;)); } }   Note: Direct injection into the OSSClient mode is typically used for scenarios where you need to handle a large number of file objects. If you only need to read the contents of the file object, OSS Starter also supports reading the file in Resource mode.\nStart Application  Add necessary configurations to file /src/main/resources/application.properties.\nspring.application.name=oss-example server.port=18084 spring.cloud.alibaba.oss.accessKeyId=your-ak spring.cloud.alibaba.oss.secretAccessKey=your-sk spring.cloud.alibaba.oss.region=cn-beijing  Start the application in IDE or by building a fatjar.\n Start in IDE: Find main class OSSApplication, and execute the main method. Build a fatjar：  Execute command mvn clean package to build a fatjar. Run command java -jar oss-example.jar to start the application.    After startup, a bucket called \u0026lsquo;spring-cloud-alibaba\u0026rsquo; is automatically created in OSS.\nUpload or download files Upload files Run curl command to upload files. It will upload file \u0026lsquo;oss-test.json\u0026rsquo; in the classpath directory. The content of this file is JSON string:\ncurl http://localhost:18084/upload  Results：\n// If configurations are correct, the output will be as follows upload success // If an error occurs during uploading, the output will be 'upload fail: fail reason'. For example, if accessKeyId is wrong，the output will be upload fail: The OSS Access Key Id you provided does not exist in our records. [ErrorCode]: InvalidAccessKeyId [RequestId]: RequestId [HostId]: xxx.oss-cn-beijing.aliyuncs.com [ResponseError]: InvalidAccessKeyId The OSS Access Key Id you provided does not exist in our records. RequestId xxx.oss-cn-beijing.aliyuncs.com xxx-accessKeyId  Download files Use curl command to download files. It will download the oss-test.json file that you uploaded just now and print in result):\ncurl http://localhost:18084/download  Results：\n// If configurations are correct, the output will be as follows download success, content: { \u0026quot;name\u0026quot;: \u0026quot;spring-cloud-alibaba\u0026quot;, \u0026quot;github\u0026quot;: \u0026quot;https://github.com/spring-cloud-incubator/spring-cloud-alibaba\u0026quot;, \u0026quot;authors\u0026quot;: [\u0026quot;Jim\u0026quot;, \u0026quot;flystar32\u0026quot;], \u0026quot;emails\u0026quot;: [\u0026quot;fangjian0423@gmail.com\u0026quot;, \u0026quot;flystar32@163.com\u0026quot;] } // If an error occurs during downloading, the output will be 'download fail: fail reason'. For example, if accessKeyId is wrong，fail reason will be as follows download fail: The OSS Access Key Id you provided does not exist in our records. [ErrorCode]: InvalidAccessKeyId [RequestId]: RequestId [HostId]: xxx.oss-cn-beijing.aliyuncs.com [ResponseError]: InvalidAccessKeyId The OSS Access Key Id you provided does not exist in our records. RequestId sxxx.oss-cn-beijing.aliyuncs.com xxx-accessKeyId  Verify results on OSS You can verify results on the OSS console when you finish uploading or downloading files. 1. Log on to the OSS console，and you will find a bucket named spring-cloud-alibaba.\n Click the spring-cloud-alibaba bucket, select the Files tab, and you will find the oss-test file. The file \u0026lsquo;oss-test\u0026rsquo; is located in directory \u0026lsquo;custom-dir\u0026rsquo;. The objectName of the file is \u0026lsquo;custom-dir/oss-test\u0026rsquo;. File directory and file is separated by \u0026lsquo;/\u0026rsquo;.  Endpoint OSS starter also supports the implmentation of Spring Boot acutator endpoints.\nPrerequisite:\nAdd denpendency spring-boot-starter-actuator to your pom.xml file, and configure your endpoint security stategy.\n Spring Boot1.x: Add configuration management.security.enabled=false Spring Boot2.x: Add configuration management.endpoints.web.exposure.include=*  To view the endpoint information, visit the following URLs:\nSpring Boot1.x: OSS Endpoint URL is http://127.0.0.1:18084/oss.\nSpring Boot2.x: OSS Endpoint URL is http://127.0.0.1:18084/acutator/oss.\nEndpoint will show the configurations and the list of buckets of all OSSClients.\nMultiple OSSClients If you need multiple OSSClients，like Multi DataSources, build OSSProperties first，and then build OSSClient. Specify information such as assessKeyId and secrectAccessKey for each OSSClient.\n @Bean @ConfigurationProperties(prefix = \u0026quot;spring.cloud.alibaba.oss1\u0026quot;) public OSSProperties ossProperties1() { return new OSSProperties(); } @Bean public OSS ossClient1(@Qualifier(\u0026quot;ossProperties1\u0026quot;) OSSProperties ossProperties) { return new OSSClientBuilder().build(ossProperties.getEndpoint(), ossProperties.getAccessKeyId(), ossProperties.getSecretAccessKey(), ossProperties.getSecurityToken(), ossProperties.getConfiguration()); }   OSSClient shutdown：You do not need to shutdown OSSClient. It will be done in OSSApplicationListener.  Read file using resource mode OSS Starter supports getting file objects by Spring Resource. Simply configure OSS protocol of the resource：\n @Value(\u0026quot;oss://spring-cloud-alibaba/oss-test\u0026quot;) private Resource file; // read file content StreamUtils.copyToString(file.getInputStream(), Charset.forName(CharEncoding.UTF_8))  Stop OSSClient service You do not need to manually shut down OSSClient. OSS Starter calls all OSSClient shutdown methods in the OSSApplicationListener during ApplicationContext close.\nIf you have any feedback or suggestions for Spring Cloud OSS Starter, please don\u0026rsquo;t hesitate to tell us by submitting github issues or via other community channels.\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/",
	"title": "Spring Cloud Alibaba",
	"tags": [],
	"description": "",
	"content": " Spring Cloud Alibaba provides a one-stop solution for distributed application development. It contains all the components required to develop distributed applications, making it easy for you to develop your applications using Spring Cloud.\nWith Spring Cloud Alibaba，you only need to add some annotations and a small amount of configurations to connect Spring Cloud applications to the distributed solutions of Alibaba, and build a distributed application system with Alibaba middleware.\nFeatures  Flow control and service degradation：Flow control for HTTP services is supported by default. You can also customize flow control and service degradation rules using annotations. The rules can be changed dynamically. Service registration and discovery：Service can be registered and clients can discover the instances using Spring-managed beans, auto integration Ribbon. Distributed configuration：support for externalized configuration in a distributed system, auto refresh when configuration changes. AliCloud Object Storage：massive, secure, low-cost, and highly reliable cloud storage services. Support for storing and accessing any type of data in any application, anytime, anywhere. For more features, please refer to Roadmap.  Components Sentinel: Sentinel takes \u0026ldquo;traffic flow\u0026rdquo; as the breakthrough point, and provides solutions in areas such as flow control, concurrency, circuit breaking, and load protection to protect service stability.\nNacos: an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications.\nAliCloud OSS: An encrypted and secure cloud storage service which stores, processes and accesses massive amounts of data from anywhere in the world.\nFor more features please refer to Roadmap.\nHow to build  master branch: Corresponds to Spring Boot 2.x. JDK 1.8 or later versions are supported. 1.x branch: Corresponds to Spring Boot 1.x，JDK 1.7 or later versions are supported.  Spring Cloud uses Maven for most build-related activities, and you should be able to get off the ground quite quickly by cloning the project you are interested in and typing:\n./mvnw install  How to use A spring-cloud-alibaba-examples module is included in our project for you to get started with Spring Cloud Alibaba quickly. It contains an example, and you can refer to the readme file in the example project for a quick walkthrough.\nExamples：\nSentinel example\nNacos Config Example\nNacos Discovery Example\nAliCloud OSS Example\nVersion control guidelines The version number of the project is in the form of x.x.x, where x is a number, starting from 0, and is not limited to the range 0~9. When the project is in the incubator phase, the first version number is fixed to 0, that is, the version number is 0.x.x.\nAs the interfaces and annotations of Spring Boot 1 and Spring Boot 2 have been changed significantly in the Actuator module, and spring-cloud-commons is also changed quite a lot from 1.x.x to 2.0.0, we maintain two different branches to support Spring Boot 1 and Spring Boot 2:\n 0.1.x for Spring Boot 1 0.2.x for Spring Boot 2  During the incubation period，the version management of the project will follow these rules：\n Functional updates will be reflected in the 3rd number of the version, for example, the next version of 0.1.0 will be 0.1.1。  Contact Us Mailing list is recommended for discussing almost anything related to spring-cloud-alibaba.\nspring-cloud-alibaba@googlegroups.com:You can ask questions here if you encounter any problem when using or developing spring-cloud-alibaba.\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/sentinel/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "_index.en.md\n"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/quick_start/test/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Spring Cloud Alibaba \u0026#21442;\u0026#32771;\u0026#25991;\u0026#26723;Spring Cloud Alibaba \u0026#21442;\u0026#32771;\u0026#25991;\u0026#26723;Authorsxiaojing, xiaolongzuo, jim fang, bingting pengTable of Contents\n1. \u0026#20171;\u0026#32461;2. \u0026#20381;\u0026#36182;\u0026#31649;\u0026#29702;3. Spring Cloud Alibaba Nacos DiscoveryI. Spring Cloud Alibaba Nacos Config4. \u0026#24555;\u0026#36895;\u0026#24320;\u0026#22987;4.1. \u0026#22522;\u0026#20110;properties\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#26041;\u0026#24335;4.1.1. Nacos \u0026#26381;\u0026#21153;\u0026#31471;\u0026#21021;\u0026#22987;\u0026#21270;4.1.2. \u0026#23458;\u0026#25143;\u0026#31471;\u0026#20351;\u0026#29992;\u0026#26041;\u0026#24335;4.2. \u0026#22522;\u0026#20110;yaml\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#26041;\u0026#24335;4.3. \u0026#25903;\u0026#25345;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#21160;\u0026#24577;\u0026#26356;\u0026#26032;4.4. \u0026#21487;\u0026#25903;\u0026#25345;profile\u0026#31890;\u0026#24230;\u0026#30340;\u0026#37197;\u0026#32622;5. Spring Cloud Alibaba Sentinel6. Spring Cloud Alibaba Rocket Binder7. Spring Cloud AliCloud ANSII. Spring Cloud AliCloud ACM8. Spring Cloud AliCloud OSS1.\u0026nbsp;\u0026#20171;\u0026#32461;Spring Cloud Alibaba \u0026#33268;\u0026#21147;\u0026#20110;\u0026#25552;\u0026#20379;\u0026#24494;\u0026#26381;\u0026#21153;\u0026#24320;\u0026#21457;\u0026#30340;\u0026#19968;\u0026#31449;\u0026#24335;\u0026#35299;\u0026#20915;\u0026#26041;\u0026#26696;\u0026#12290;\u0026#27492;\u0026#39033;\u0026#30446;\u0026#21253;\u0026#21547;\u0026#24320;\u0026#21457;\u0026#20998;\u0026#24067;\u0026#24335;\u0026#24212;\u0026#29992;\u0026#26381;\u0026#21153;\u0026#30340;\u0026#24517;\u0026#38656;\u0026#32452;\u0026#20214;\u0026#65292;\u0026#26041;\u0026#20415;\u0026#24320;\u0026#21457;\u0026#32773;\u0026#36890;\u0026#36807; Spring Cloud \u0026#32534;\u0026#31243;\u0026#27169;\u0026#22411;\u0026#36731;\u0026#26494;\u0026#20351;\u0026#29992;\u0026#36825;\u0026#20123;\u0026#32452;\u0026#20214;\u0026#26469;\u0026#24320;\u0026#21457;\u0026#20998;\u0026#24067;\u0026#24335;\u0026#24212;\u0026#29992;\u0026#26381;\u0026#21153;\u0026#12290;\n\u0026#20381;\u0026#25176; Spring Cloud Alibaba\u0026#65292;\u0026#24744;\u0026#21482;\u0026#38656;\u0026#35201;\u0026#28155;\u0026#21152;\u0026#19968;\u0026#20123;\u0026#27880;\u0026#35299;\u0026#21644;\u0026#23569;\u0026#37327;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#23601;\u0026#21487;\u0026#20197;\u0026#23558; Spring Cloud \u0026#24212;\u0026#29992;\u0026#25509;\u0026#20837;\u0026#38463;\u0026#37324;\u0026#20998;\u0026#24067;\u0026#24335;\u0026#24212;\u0026#29992;\u0026#35299;\u0026#20915;\u0026#26041;\u0026#26696;\u0026#65292;\u0026#36890;\u0026#36807;\u0026#38463;\u0026#37324;\u0026#20013;\u0026#38388;\u0026#20214;\u0026#26469;\u0026#36805;\u0026#36895;\u0026#25645;\u0026#24314;\u0026#20998;\u0026#24067;\u0026#24335;\u0026#24212;\u0026#29992;\u0026#31995;\u0026#32479;\u0026#12290;\n2.\u0026nbsp;\u0026#20381;\u0026#36182;\u0026#31649;\u0026#29702;Spring Cloud Alibaba BOM \u0026#21253;\u0026#21547;\u0026#20102;\u0026#23427;\u0026#25152;\u0026#20351;\u0026#29992;\u0026#30340;\u0026#25152;\u0026#26377;\u0026#20381;\u0026#36182;\u0026#30340;\u0026#29256;\u0026#26412;\u0026#12290;\n3.\u0026nbsp;Spring Cloud Alibaba Nacos DiscoveryPart\u0026nbsp;I.\u0026nbsp;Spring Cloud Alibaba Nacos Config4.\u0026nbsp;\u0026#24555;\u0026#36895;\u0026#24320;\u0026#22987;4.1\u0026nbsp;\u0026#22522;\u0026#20110;properties\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#26041;\u0026#24335;4.1.1\u0026nbsp;Nacos \u0026#26381;\u0026#21153;\u0026#31471;\u0026#21021;\u0026#22987;\u0026#21270;1\u0026#12289;\u0026#21551;\u0026#21160;Nacos Server\u0026#12290;\u0026#21551;\u0026#21160;\u0026#26041;\u0026#24335;\u0026#21487;\u0026#35265; Naocs \u0026#23448;\u0026#32593;\n2\u0026#12289;\u0026#21551;\u0026#21160;\u0026#22909;Nacos\u0026#20043;\u0026#21518;\u0026#65292;\u0026#22312;Nacos\u0026#28155;\u0026#21152;\u0026#22914;\u0026#19979;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#27880;\u0026#24847;data id\u0026#26159;\u0026#20197; properties\u0026#20026;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#65292;\u0026#40664;\u0026#35748;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#26041;\u0026#24335;\u0026#12290;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nData ID: nacos-config.properties Group : DEFAULT_GROUP \u0026#37197;\u0026#32622;\u0026#26684;\u0026#24335;: TEXT \u0026#37197;\u0026#32622;\u0026#20869;\u0026#23481;\u0026#65306; user.name: nacos-config-properties user.age: 904.1.2\u0026nbsp;\u0026#23458;\u0026#25143;\u0026#31471;\u0026#20351;\u0026#29992;\u0026#26041;\u0026#24335;\u0026#20026;\u0026#20102;\u0026#33021;\u0026#22815;\u0026#22312;\u0026#24212;\u0026#29992;\u0026#31243;\u0026#24207;\u0026#20013;\u0026#20351;\u0026#29992;Nacos\u0026#20316;\u0026#20026;Sping Cloud Config\u0026#30340;\u0026#21518;\u0026#31471;\u0026#23384;\u0026#20648;\u0026#26381;\u0026#21153;\u0026#65292;\u0026#22312;\u0026#24744;\u0026#26500;\u0026#24314;Spring Boot \u0026#24212;\u0026#29992;\u0026#30340;\u0026#21516;\u0026#26102;\u0026#28155;\u0026#21152;\u0026#19968;\u0026#20010;Spring Boot Starter org.springframework.cloud:spring-cloud-starter-alibaba-nacos-config\u0026#12290;\u0026#20197;\u0026#19979;\u0026#26159;\u0026#19968;\u0026#20010;\u0026#22522;\u0026#30784;\u0026#30340;maven \u0026#20381;\u0026#36182;\u0026#37197;\u0026#32622;:\n\u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.5.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;Finchley.SR1\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;\u0026#29616;\u0026#22312;\u0026#23601;\u0026#21487;\u0026#20197;\u0026#21019;\u0026#24314;\u0026#19968;\u0026#20010;\u0026#26631;\u0026#20934;\u0026#30340;Spring Boot\u0026#30340;\u0026#24212;\u0026#29992;\u0026#12290;\n@SpringBootApplication public class ProviderApplication { public static void main(String[] args) { ConfigurableApplicationContext applicationContext = SpringApplication.run(ProviderApplication.class, args); String userName = applicationContext.getEnvironment().getProperty(\"user.name\"); String userAge = applicationContext.getEnvironment().getProperty(\"user.age\"); System.err.println(\"user name :\"+userName+\"; age: \"+userAge); } }spring-cloud-starter-alibaba-nacos-config \u0026#23545;\u0026#20110;Nacos\u0026#26381;\u0026#21153;\u0026#31471;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#27809;\u0026#26377;\u0026#40664;\u0026#35748;\u0026#20540;\u0026#65292;\u0026#22240;\u0026#27492;\u0026#22312;\u0026#36816;\u0026#34892;\u0026#27492;Example \u0026#20043;\u0026#21069;\u0026#65292; \u0026#24517;\u0026#39035;\u0026#20351;\u0026#29992; bootstrap.properties \u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#26469;\u0026#37197;\u0026#32622;Nacos Server\u0026#22320;\u0026#22336;\u0026#65292;\u0026#20363;\u0026#22914;\u0026#65306;\nspring.application.name=nacos-config #\u0026#27880;\u0026#24847;\u0026#65292;spring.application.name \u0026#24517;\u0026#39035;\u0026#35201;\u0026#25918;\u0026#22312;bootstrap.properties\u0026#20013; spring.cloud.nacos.config.server-addr=127.0.0.1:8848\u0026#21551;\u0026#21160;\u0026#36825;\u0026#20010;Example\u0026#65292;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30475;\u0026#21040;\u0026#25171;\u0026#21360;\u0026#20986;\u0026#30340;\u0026#20540;\u0026#27491;\u0026#26159;\u0026#22312;Nacos\u0026#19978;\u0026#39044;\u0026#20808;\u0026#37197;\u0026#32622;\u0026#22909;\u0026#30340;\u0026#20540;\u0026#12290;\n2018-11-02 14:24:51.638 INFO 32700 --- [main] c.a.demo.provider.ProviderApplication : Started ProviderApplication in 14.645 seconds (JVM running for 15.139) user name :nacos-config-properties; age: 90 2018-11-02 14:24:51.688 INFO 32700 --- [-127.0.0.1:8848] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@a8c5e74: startup date [Fri Nov 02 14:24:51 CST 2018]; root of context hierarchy 2018-114.2\u0026nbsp;\u0026#22522;\u0026#20110;yaml\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#26041;\u0026#24335;spring-cloud-starter-alibaba-nacos-config \u0026#40664;\u0026#35748;\u0026#23545;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#20026;properties\u0026#30340;\u0026#25903;\u0026#25345;\u0026#65292;\u0026#22914;\u0026#26524;\u0026#20064;\u0026#24815;\u0026#20351;\u0026#29992;yaml\u0026#26684;\u0026#24335;\u0026#26469;\u0026#20316;\u0026#20026;\u0026#24212;\u0026#29992;\u0026#20013;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#20063;\u0026#26159;\u0026#21487;\u0026#20197;\u0026#25903;\u0026#25345;\u0026#30340;\u0026#12290;\u0026#36825;\u0026#20010;\u0026#26102;\u0026#20505;\u0026#21482;\u0026#38656;\u0026#35201;\u0026#23436;\u0026#25104;\u0026#20197;\u0026#19979;\u0026#20004;\u0026#27493;\u0026#65306;\n1\u0026#12289;\u0026#22312;bootstrap.properties\u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#20013;\u0026#26174;\u0026#31034;\u0026#30340;\u0026#26469;\u0026#22768;\u0026#26126;\u0026#20351;\u0026#29992;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#12290;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\nspring.application.name=nacos-config spring.cloud.nacos.config.server-addr=127.0.0.1:8848 spring.cloud.nacos.config.file-extension=yaml #\u0026#26174;\u0026#31034;\u0026#30340;\u0026#22768;\u0026#26126;\u0026#20351;\u0026#29992;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;2\u0026#12289;\u0026#22312;Nacos\u0026#30340;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#26032;\u0026#22686;\u0026#19968;\u0026#20010;dataid\u0026#20026;yaml\u0026#20026;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nData ID: nacos-config.yaml Group : DEFAULT_GROUP \u0026#37197;\u0026#32622;\u0026#26684;\u0026#24335;: YAML \u0026#37197;\u0026#32622;\u0026#20869;\u0026#23481;: user.name: nacos-config-yaml user.age: 68\u0026#36825;\u0026#20004;\u0026#27493;\u0026#23436;\u0026#25104;\u0026#21518;\u0026#65292;\u0026#37325;\u0026#21551;\u0026#27979;\u0026#35797;\u0026#31243;\u0026#24207;\u0026#65292;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30475;\u0026#21040;\u0026#36755;\u0026#20986;\u0026#26159;\u0026#20197;dataid\u0026#20026;opensource-service-provider3.yaml\u0026#37197;\u0026#32622;\u0026#30340;\u0026#20540;\u0026#12290;\n2018-11-02 14:59:00.484 INFO 32928 --- [main] c.a.demo.provider.ProviderApplication:Started ProviderApplication in 14.183 seconds (JVM running for 14.671) user name :nacos-config-yaml; age: 68 2018-11-02 14:59:00.529 INFO 32928 --- [-127.0.0.1:8848] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@265a478e: startup date [Fri Nov 02 14:59:00 CST 2018]; root of context hierarchy4.3\u0026nbsp;\u0026#25903;\u0026#25345;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#21160;\u0026#24577;\u0026#26356;\u0026#26032;spring-cloud-starter-alibaba-nacos-config \u0026#20063;\u0026#25903;\u0026#25345;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#21160;\u0026#24577;\u0026#26356;\u0026#26032;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65292;\u0026#24403;\u0026#21464;\u0026#26356;user.name\u0026#26102;\u0026#65292;\u0026#24212;\u0026#29992;\u0026#31243;\u0026#24207;\u0026#20013;\u0026#33021;\u0026#22815;\u0026#33719;\u0026#21462;\u0026#21040;\u0026#26368;\u0026#26032;\u0026#30340;\u0026#20540;\u0026#65306;\nuser name :nacos-config-yaml; age: 68 user name :nacos-config-yaml; age: 68 user name :nacos-config-yaml; age: 68 2018-11-02 15:04:25.069 INFO 32957 --- [-127.0.0.1:8848] o.s.boot.SpringApplication : Started application in 0.144 seconds (JVM running for 71.752) 2018-11-02 15:04:25.070 INFO 32957 --- [-127.0.0.1:8848] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@10c89124: startup date [Fri Nov 02 15:04:25 CST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6520af7 2018-11-02 15:04:25.071 INFO 32957 --- [-127.0.0.1:8848] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6520af7: startup date [Fri Nov 02 15:04:24 CST 2018]; root of context hierarchy user name :nacos-config-yaml-update; age: 68 user name :nacos-config-yaml-update; age: 684.4\u0026nbsp;\u0026#21487;\u0026#25903;\u0026#25345;profile\u0026#31890;\u0026#24230;\u0026#30340;\u0026#37197;\u0026#32622;spring-cloud-starter-alibaba-nacos-config \u0026#22312;\u0026#21152;\u0026#36733;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#26102;\u0026#20505;\u0026#65292;\u0026#19981;\u0026#20165;\u0026#20165;\u0026#21152;\u0026#36733;\u0026#20102;\u0026#20197;dataid\u0026#20026;${spring.application.name}.${file-extension:properties}\u0026#20026;\u0026#21069;\u0026#32512;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#36824;\u0026#21152;\u0026#36733;\u0026#20102;dataid\u0026#20026;${spring.application.name}-${profile}.${file-extension:properties}\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#22312;\u0026#26085;\u0026#24120;\u0026#24320;\u0026#21457;\u0026#20013;\u0026#22914;\u0026#26524;\u0026#36935;\u0026#21040;\u0026#22810;\u0026#22871;\u0026#29615;\u0026#22659;\u0026#19979;\u0026#30340;\u0026#19981;\u0026#21516;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#21487;\u0026#20197;\u0026#25171;\u0026#24320;Spring\u0026#33258;\u0026#24102;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#21151;\u0026#33021;\u0026#12290;\nspring.profiles.active=${deploy.env}\u0026#20854;\u0026#20013; ${deploy.env}\u0026#21464;\u0026#37327;\u0026#30340;\u0026#20540;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#21551;\u0026#21160;\u0026#24212;\u0026#29992;\u0026#26102;\u0026#36890;\u0026#36807;-Ddeploy.env=*\u0026#26469;\u0026#21160;\u0026#24577;\u0026#25351;\u0026#23450;\u0026#12290;\u0026#27604;\u0026#22914;\u0026#29616;\u0026#22312;\u0026#22312;Nacos\u0026#19978;\u0026#26032;\u0026#22686;\u0026#20102;\u0026#19968;\u0026#20010;dataid\u0026#20026;\u0026#65306;nacos-config-develop.yaml\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nData ID: nacos-config-develop.yaml Group : DEFAULT_GROUP \u0026#37197;\u0026#32622;\u0026#26684;\u0026#24335;: YAML \u0026#37197;\u0026#32622;\u0026#20869;\u0026#23481;: current.env: develop-env\u0026#21516;\u0026#26102;\u0026#21551;\u0026#21160;\u0026#24212;\u0026#29992;\u0026#30340;\u0026#26102;\u0026#20505;\u0026#36890;\u0026#36807;-Ddeploy.env=develop \u0026#26469;\u0026#25351;\u0026#23450;\u0026#24403;\u0026#21069;spring.profiles.active\u0026#30340;\u0026#20540;\u0026#12290; \u0026#21551;\u0026#21160; Spring Boot \u0026#24212;\u0026#29992;\u0026#27979;\u0026#35797;\u0026#30340;\u0026#20195;\u0026#30721;\u0026#22914;\u0026#19979;\u0026#65306;\n@SpringBootApplication public class ProviderApplication { public static void main(String[] args) { ConfigurableApplicationContext applicationContext = SpringApplication.run(ProviderApplication.class, args); while(true) { String userName = applicationContext.getEnvironment().getProperty(\"user.name\"); String userAge = applicationContext.getEnvironment().getProperty(\"user.age\"); //\u0026#33719;\u0026#21462;\u0026#24403;\u0026#21069;\u0026#37096;\u0026#32626;\u0026#30340;\u0026#29615;\u0026#22659; String currentEnv = applicationContext.getEnvironment().getProperty(\"current.env\"); System.err.println(\"in \"+currentEnv+\" enviroment; \"+\"user name :\" + userName + \"; age: \" + userAge); TimeUnit.SECONDS.sleep(1); } } }\u0026#21551;\u0026#21160;\u0026#21518;\u0026#65292;\u0026#21487;\u0026#35265;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30340;\u0026#36755;\u0026#20986;\u0026#32467;\u0026#26524;\u0026#65306;\nin develop-evn enviroment; user name :nacos-config-yaml-update; age: 68 2018-11-02 15:34:25.013 INFO 33014 --- [ Thread-11] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6f1c29b7: startup date [Fri Nov 02 15:33:57 CST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@63355449\u0026#22914;\u0026#26524;\u0026#38656;\u0026#35201;\u0026#20999;\u0026#25442;\u0026#21040;\u0026#29983;\u0026#20135;\u0026#29615;\u0026#22659;\u0026#65292;\u0026#37027;\u0026#20040;\u0026#21482;\u0026#38656;\u0026#35201;\u0026#26356;\u0026#25913;\u0026#21551;\u0026#21160;\u0026#30340;-Ddeploy.env=product \u0026#21442;\u0026#25968;\u0026#21363;\u0026#21487;\u0026#12290;\u0026#21069;\u0026#25552;\u0026#26159;\u0026#29983;\u0026#20135;\u0026#29615;\u0026#22659;\u0026#19978;Nacos\u0026#24050;\u0026#32463;\u0026#28155;\u0026#21152;\u0026#20102;\u0026#35813;\u0026#29615;\u0026#22659;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#20363;\u0026#22914;\u0026#65292;\u0026#29616;\u0026#22312;\u0026#22312;\u0026#29983;\u0026#25104;\u0026#29615;\u0026#22659;\u0026#19979;\u0026#30340;Naocs\u0026#28155;\u0026#21152;\u0026#20102;dataid\u0026#20026;\u0026#65306;nacos-config-product.yaml\u0026#30340;\u0026#37197;\u0026#32622;\u0026#65306;\nData ID: nacos-config-product.yaml Group : DEFAULT_GROUP \u0026#37197;\u0026#32622;\u0026#26684;\u0026#24335;: YAML \u0026#37197;\u0026#32622;\u0026#20869;\u0026#23481;: current.env: product-env\u0026#20197;-Ddeploy.env=product \u0026#21551;\u0026#21160;\u0026#27979;\u0026#35797;\u0026#31243;\u0026#24207;\u0026#65292;\u0026#36755;\u0026#20986;\u0026#32467;\u0026#26524;\u0026#22914;\u0026#19979;\u0026#65306;\nin product-env enviroment; user name :nacos-config-yaml-update; age: 68 2018-11-02 15:42:14.628 INFO 33024 --- [Thread-11] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6aa8e115: startup date [Fri Nov 02 15:42:03 CST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@19bb07ed5.\u0026nbsp;Spring Cloud Alibaba Sentinel6.\u0026nbsp;Spring Cloud Alibaba Rocket Binder7.\u0026nbsp;Spring Cloud AliCloud ANSPart\u0026nbsp;II.\u0026nbsp;Spring Cloud AliCloud ACMSpring Cloud Alibaba Config \u0026#25552;\u0026#20379;\u0026#20102;\u0026#21644;\u0026#38463;\u0026#37324;\u0026#20113;\u0026#19978;\u0026#30340;ACM\u0026#30340;\u0026#38598;\u0026#25104;\u0026#12290;\u0026#20351;\u0026#24471;\u0026#22312;\u0026#39033;\u0026#30446;\u0026#20013;\u0026#22914;\u0026#26524;\u0026#38656;\u0026#35201;\u0026#19978;\u0026#20113;\u0026#30340;\u0026#29992;\u0026#25143;\u0026#21487;\u0026#20197;\u0026#38750;\u0026#24120;\u0026#26041;\u0026#20415;\u0026#26080;\u0026#32541;\u0026#30340;\u0026#23545;\u0026#25509;\u0026#38463;\u0026#37324;\u0026#20113;\u0026#65292;\u0026#26469;\u0026#20139;\u0026#21463;\u0026#20113;\u0026#31471;\u0026#25552;\u0026#20379;\u0026#30340;\u0026#31283;\u0026#23450;\u0026#26381;\u0026#21153;\u0026#12290;\n1\u0026nbsp;\u0026#24555;\u0026#36895;\u0026#24320;\u0026#22987;\u0026#20026;\u0026#20102;\u0026#33021;\u0026#22815;\u0026#22312;\u0026#26412;\u0026#22320;\u0026#24320;\u0026#21457;\u0026#26102;\u0026#21487;\u0026#20197;\u0026#20351;\u0026#29992;\u0026#21644;\u0026#20113;\u0026#19978;\u0026#20855;\u0026#26377;\u0026#30456;\u0026#21516;\u0026#21151;\u0026#33021;\u0026#30340;ACM\u0026#26381;\u0026#21153;\u0026#65292;\u0026#25105;\u0026#20204;\u0026#25552;\u0026#20379;\u0026#20102;\u0026#29992;\u0026#20110;\u0026#26412;\u0026#22320;\u0026#24320;\u0026#21457;\u0026#27979;\u0026#35797;\u0026#30340;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#12290;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#20320;\u0026#21487;\u0026#20197;\u0026#29702;\u0026#35299;\u0026#20026;\u0026#29992;\u0026#20110;\u0026#26041;\u0026#20415;\u0026#30340;\u0026#26412;\u0026#22320;\u0026#24320;\u0026#21457;\u0026#27979;\u0026#35797;\u0026#30340;Saas\u0026#24179;\u0026#21488;\u0026#12290;\n1.1\u0026nbsp;\u0026#22522;\u0026#20110;properties\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#26381;\u0026#21153;\u0026#31471;\u0026#21021;\u0026#22987;\u0026#21270;1\u0026#12289;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#30340;\u0026#19979;\u0026#36733;\u0026#21644;\u0026#21551;\u0026#21160;\u0026#26041;\u0026#24335;\u0026#21487;\u0026#21442;\u0026#32771; \u0026#36825;\u0026#37324;\n2\u0026#12289;\u0026#21551;\u0026#21160;\u0026#22909;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#20043;\u0026#21518;\u0026#65292;\u0026#22312;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#20013;\u0026#28155;\u0026#21152;\u0026#22914;\u0026#19979;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#27880;\u0026#24847;data id\u0026#26159;\u0026#20197; properties\u0026#20026;\u0026#25193;\u0026#23637;\u0026#21517;(\u0026#40664;\u0026#35748;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#26041;\u0026#24335;)\u0026#12290;\nGroup: DEFAULT_GROOUP DataId: acm-config.properties Content: user.name=alibaba user.age=56\u0026#23458;\u0026#25143;\u0026#31471;\u0026#20351;\u0026#29992;\u0026#26041;\u0026#24335;\u0026#20026;\u0026#20102;\u0026#33021;\u0026#22815;\u0026#22312;\u0026#24212;\u0026#29992;\u0026#31243;\u0026#24207;\u0026#20013;\u0026#20351;\u0026#29992;ACM\u0026#20316;\u0026#20026;Sping Cloud Config\u0026#30340;\u0026#21518;\u0026#31471;\u0026#23384;\u0026#20648;\u0026#26381;\u0026#21153;\u0026#65292;\u0026#22312;\u0026#24744;\u0026#26500;\u0026#24314;Spring Boot \u0026#24212;\u0026#29992;\u0026#30340;\u0026#21516;\u0026#26102;\u0026#28155;\u0026#21152;\u0026#19968;\u0026#20010;Spring Boot Starter org.springframework.cloud:spring-cloud-starter-alicloud-acm\u0026#12290;\u0026#20197;\u0026#19979;\u0026#26159;\u0026#19968;\u0026#20010;\u0026#22522;\u0026#30784;\u0026#30340;maven \u0026#20381;\u0026#36182;\u0026#37197;\u0026#32622;:\n\u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.5.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;Finchley.SR1\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.0.RELEASE\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alicloud-acm\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;\u0026#29616;\u0026#22312;\u0026#20320;\u0026#23601;\u0026#21487;\u0026#20197;\u0026#21019;\u0026#24314;\u0026#19968;\u0026#20010;\u0026#26631;\u0026#20934;\u0026#30340;Spring Boot\u0026#30340;\u0026#24212;\u0026#29992;\u0026#12290;\n@SpringBootApplication public class ProviderApplication { public static void main(String[] args) { ConfigurableApplicationContext applicationContext = SpringApplication.run(ProviderApplication.class, args); String userName = applicationContext.getEnvironment().getProperty(\"user.name\"); String userAge = applicationContext.getEnvironment().getProperty(\"user.age\"); System.err.println(\"user name :\"+userName+\"; age: \"+userAge); } }spring-cloud-starter-alicloud-acm \u0026#23545;\u0026#20110;ACM\u0026#26381;\u0026#21153;\u0026#31471;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#26377;\u0026#40664;\u0026#35748;\u0026#20540;(\u0026#40664;\u0026#35748;\u0026#37197;\u0026#32622;\u0026#32465;\u0026#23450;\u0026#21040;\u0026#30340;ip\u0026#21644;\u0026#31471;\u0026#21475;\u0026#20026;127.0.0.1\u0026#21644;8080)\u0026#65292;\u0026#22240;\u0026#27492;\u0026#22312;\u0026#36816;\u0026#34892;\u0026#27492;Example \u0026#20043;\u0026#21069;\u0026#65292; \u0026#20320;\u0026#21482;\u0026#38656;\u0026#22312; bootstrap.properties \u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#37197;\u0026#32622;spring.application.name\u0026#21363;\u0026#21487;\u0026#65292;\u0026#20363;\u0026#22914;\u0026#65306;\nspring.application.name=acm-config #\u0026#27880;\u0026#24847;\u0026#65292;spring.application.name \u0026#24517;\u0026#39035;\u0026#35201;\u0026#25918;\u0026#22312;bootstrap.properties\u0026#20013;\u0026#21551;\u0026#21160;\u0026#36825;\u0026#20010;Example\u0026#65292;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30475;\u0026#21040;\u0026#25171;\u0026#21360;\u0026#20986;\u0026#30340;\u0026#20540;\u0026#27491;\u0026#26159;\u0026#25105;\u0026#20204;\u0026#22312;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#19978;\u0026#39044;\u0026#20808;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#20540;\u0026#12290;\n2018-11-05 11:41:50.661 INFO 1541 --- [main] com.alibaba.demo.normal.ProviderApp : Started ProviderApp in 15.809 seconds (JVM running for 16.513) user name :alibaba; age: 56 2018-11-05 11:41:50.710 INFO 1541 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@1f854e9e: startup date [Mon Nov 05 11:41:50 CST 2018]; root of context hierarchy1.2\u0026nbsp;\u0026#22522;\u0026#20110;yaml\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;spring-cloud-starter-alicloud-acm \u0026#40664;\u0026#35748;\u0026#23545;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#20026;properties\u0026#30340;\u0026#25903;\u0026#25345;\u0026#65292;\u0026#22914;\u0026#26524;\u0026#20320;\u0026#20064;\u0026#24815;\u0026#20351;\u0026#29992;yaml\u0026#26684;\u0026#24335;\u0026#26469;\u0026#20316;\u0026#20026;\u0026#24744;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#20063;\u0026#26159;\u0026#21487;\u0026#20197;\u0026#25903;\u0026#25345;\u0026#30340;\u0026#12290;\u0026#36825;\u0026#20010;\u0026#26102;\u0026#20505;\u0026#20320;\u0026#21482;\u0026#38656;\u0026#35201;\u0026#22312;bootstrap.properties\u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#20013;\u0026#26174;\u0026#31034;\u0026#30340;\u0026#26469;\u0026#22768;\u0026#26126;\u0026#20351;\u0026#29992;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\nspring.application.name=acm-config spring.cloud.nacos.config.file-extension=yaml #\u0026#26174;\u0026#31034;\u0026#30340;\u0026#22768;\u0026#26126;\u0026#20351;\u0026#29992;\u0026#30340;\u0026#25991;\u0026#20214;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#21516;\u0026#26102;\u0026#36824;\u0026#38656;\u0026#22312;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#30340;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#26032;\u0026#22686;\u0026#19968;\u0026#20010;dataid\u0026#20026;yaml\u0026#20026;\u0026#25193;\u0026#23637;\u0026#21517;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nGroup: DEFAULT_GROUP DataId: acm-config.yaml Content: user.name: yaml-alibaba user.age: 102\u0026#23436;\u0026#25104;\u0026#20043;\u0026#21518;\u0026#65292;\u0026#37325;\u0026#21551;\u0026#27979;\u0026#35797;\u0026#31243;\u0026#24207;\u0026#65292;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30475;\u0026#21040;\u0026#36755;\u0026#20986;\u0026#30340;\u0026#32467;\u0026#26524;\u0026#30340;\u0026#20540;\u0026#12290;\n2018-11-05 11:50:13.829 INFO 1674 --- [main] com.alibaba.demo.normal.ProviderApp : Started ProviderApp in 15.091 seconds (JVM running for 15.626) user name :yaml-alibaba; age: 102 2018-11-05 11:50:13.868 INFO 1674 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7f64acf5: startup date [Mon Nov 05 11:50:13 CST 2018]; root of context hierarchy1.3\u0026nbsp;\u0026#25903;\u0026#25345;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#21160;\u0026#24577;\u0026#26356;\u0026#26032;spring-cloud-starter-alicloud-acm \u0026#20063;\u0026#25903;\u0026#25345;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#21160;\u0026#24577;\u0026#26356;\u0026#26032;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65292;\u0026#24403;\u0026#21464;\u0026#26356;user.name\u0026#26102;\u0026#65292;\u0026#24212;\u0026#29992;\u0026#31243;\u0026#24207;\u0026#20013;\u0026#33021;\u0026#22815;\u0026#33719;\u0026#21462;\u0026#21040;\u0026#26368;\u0026#26032;\u0026#30340;\u0026#20540;\u0026#65306;\nuser name :yaml-alibaba; age: 102 user name :yaml-alibaba; age: 102 2018-11-05 11:52:15.192 INFO 1707 --- [gPullingdefault] o.s.boot.SpringApplication : Started application in 0.162 seconds (JVM running for 26.869) 2018-11-05 11:52:15.193 INFO 1707 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@36b222ff: startup date [Mon Nov 05 11:52:15 CST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@5cfd2308 2018-11-05 11:52:15.193 INFO 1707 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@5cfd2308: startup date [Mon Nov 05 11:52:15 CST 2018]; root of context hierarchy //\u0026#24863;\u0026#30693;\u0026#21040;\u0026#37197;\u0026#32622;\u0026#21457;\u0026#29983;\u0026#21464;\u0026#26356; user name :yaml-alibaba-update; age: 10201.4\u0026nbsp;\u0026#21487;\u0026#25903;\u0026#25345;profile\u0026#31890;\u0026#24230;\u0026#30340;\u0026#37197;\u0026#32622;spring-cloud-starter-alicloud \u0026#22312;\u0026#21152;\u0026#36733;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#26102;\u0026#20505;\u0026#65292;\u0026#19981;\u0026#20165;\u0026#20165;\u0026#21152;\u0026#36733;\u0026#20102;\u0026#20197;dataid\u0026#20026;${spring.application.name}.${file-extension:properties}\u0026#20026;\u0026#21069;\u0026#32512;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#36824;\u0026#21152;\u0026#36733;\u0026#20102;dataid\u0026#20026;${spring.application.name}-${profile}.${file-extension:properties}\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#22312;\u0026#25105;\u0026#20204;\u0026#26085;\u0026#24120;\u0026#24320;\u0026#21457;\u0026#20013;\u0026#22914;\u0026#26524;\u0026#36935;\u0026#21040;\u0026#22810;\u0026#22871;\u0026#29615;\u0026#22659;\u0026#19979;\u0026#30340;\u0026#19981;\u0026#21516;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#25105;\u0026#20204;\u0026#21487;\u0026#20197;\u0026#25171;\u0026#24320;Spring\u0026#33258;\u0026#24102;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#21151;\u0026#33021;\u0026#65292;\u0026#25918;\u0026#32622;\u0026#22312;application.properties \u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#20013;\u0026#12290;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nspring.profiles.active=${deploy.env}\u0026#20854;\u0026#20013; ${deploy.env}\u0026#21464;\u0026#37327;\u0026#30340;\u0026#20540;\u0026#21487;\u0026#20197;\u0026#22312;\u0026#21551;\u0026#21160;\u0026#24212;\u0026#29992;\u0026#26102;\u0026#36890;\u0026#36807;-Ddeploy.env=*\u0026#26469;\u0026#21160;\u0026#24577;\u0026#25351;\u0026#23450;\u0026#12290;\u0026#27604;\u0026#22914;\u0026#29616;\u0026#22312;\u0026#22312;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#19978;\u0026#26032;\u0026#22686;\u0026#20102;\u0026#19968;\u0026#20010;dataid\u0026#20026;\u0026#65306;acm-config-develop.yaml\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nGroup: DEFAULT_GROUP DataId: acm-config-develop.yaml Content: deploy.env: develop\u0026#21516;\u0026#26102;\u0026#21551;\u0026#21160;\u0026#24212;\u0026#29992;\u0026#30340;\u0026#26102;\u0026#20505;\u0026#36890;\u0026#36807;-Ddeploy.env=develop \u0026#26469;\u0026#25351;\u0026#23450;\u0026#24403;\u0026#21069;spring.profiles.active\u0026#30340;\u0026#20540;\u0026#12290;\n\u0026#21551;\u0026#21160; Spring Boot \u0026#24212;\u0026#29992;\u0026#27979;\u0026#35797;\u0026#30340;\u0026#20195;\u0026#30721;\u0026#22914;\u0026#19979;\u0026#65306;\n@SpringBootApplication public class ProviderApplication { public static void main(String[] args) { ConfigurableApplicationContext applicationContext = SpringApplication.run(ProviderApp.class, args); while (true) { String userName = applicationContext.getEnvironment().getProperty(\"user.name\"); String userAge = applicationContext.getEnvironment().getProperty(\"user.age\"); //\u0026#33719;\u0026#21462;\u0026#24403;\u0026#21069;\u0026#30340;\u0026#37096;\u0026#32626;\u0026#29615;\u0026#22659; String deployEnv = applicationContext.getEnvironment().getProperty(\"deploy.env\"); System.err.println(\"Deploy Env:\"+deployEnv+\"\\n \\t user name :\" + userName + \"; age: \" + userAge); TimeUnit.SECONDS.sleep(1); } } }\u0026#21551;\u0026#21160;\u0026#21518;\u0026#65292;\u0026#21487;\u0026#35265;\u0026#25511;\u0026#21046;\u0026#21488;\u0026#30340;\u0026#36755;\u0026#20986;\u0026#32467;\u0026#26524;\u0026#65306;\n2018-11-05 14:06:25.898 INFO 1852 --- [main] com.alibaba.demo.normal.ProviderApp : Started ProviderApp in 14.947 seconds (JVM running for 15.471) Deploy Env:develop user name :yaml-alibaba-update; age: 1020 2018-11-05 14:06:25.939 INFO 1852 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@75d62d18: startup date [Mon Nov 05 14:06:25 CST 2018]; root of context hierarchy 2018-11-05 14:06:25.967 INFO 1852 --- [gPullingdefault] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring\u0026#22914;\u0026#26524;\u0026#25105;\u0026#20204;\u0026#35201;\u0026#20999;\u0026#25442;\u0026#21040;\u0026#29983;\u0026#20135;\u0026#29615;\u0026#22659;\u0026#65292;\u0026#37027;\u0026#20040;\u0026#21482;\u0026#38656;\u0026#35201;\u0026#26356;\u0026#25913;\u0026#21551;\u0026#21160;\u0026#30340;-Ddeploy.env=product \u0026#21442;\u0026#25968;\u0026#21363;\u0026#21487;\u0026#12290;\u0026#21069;\u0026#25552;\u0026#26159;\u0026#29983;\u0026#20135;\u0026#29615;\u0026#22659; \u0026#27169;\u0026#24335;\u0026#19979;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#24050;\u0026#32463;\u0026#28155;\u0026#21152;\u0026#20102;\u0026#35813;\u0026#29615;\u0026#22659;\u0026#30340;\u0026#22522;\u0026#30784;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#20363;\u0026#22914;dataid\u0026#20026;\u0026#65306;acm-config-product.yaml\u0026#30340;\u0026#37197;\u0026#32622;\u0026#65306;\nGroup: DEFAULT_GROUP DataId: acm-config-product.yaml Content: deploy.env: Product\u0026#20197;-Ddeploy.env=product \u0026#21551;\u0026#21160;\u0026#27979;\u0026#35797;\u0026#31243;\u0026#24207;\u0026#65292;\u0026#36755;\u0026#20986;\u0026#32467;\u0026#26524;\u0026#22914;\u0026#19979;\u0026#65306;\n2018-11-05 14:10:05.481 INFO 1857 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@455d34c2: startup date [Mon Nov 05 14:10:05 CST 2018]; root of context hierarchy Deploy Env:Product user name :yaml-alibaba-update; age: 1020 2018-11-05 14:10:06.798 INFO 1857 --- [ Thread-20] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3899782c: startup date [Mon Nov 05 14:10:01 CST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@245b4bdc1.5\u0026nbsp;\u0026#22522;\u0026#20110;\u0026#32452;\u0026#32423;\u0026#21035;\u0026#37197;\u0026#32622;\u0026#30340;\u0026#39640;\u0026#32423;\u0026#21151;\u0026#33021;\u0026#24403;\u0026#20320;\u0026#20064;\u0026#24815;\u0026#20351;\u0026#29992;application.properties \u0026#25110;\u0026#32773; application.yaml \u0026#26469;\u0026#20316;\u0026#20026;\u0026#20320;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#26102;\u0026#65292;\u0026#20026;\u0026#20102;\u0026#33021;\u0026#22815;\u0026#21306;\u0026#20998;\u0026#20854;\u0026#20182;\u0026#24212;\u0026#29992;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#65292;\u0026#36825;\u0026#20010;\u0026#26102;\u0026#20505;\u0026#21487;\u0026#20197;\u0026#24320;\u0026#21551; spring-cloud-starter-alicloud-acm \u0026#25552;\u0026#20379;\u0026#30340;\u0026#22522;\u0026#20110;\u0026#32452;\u0026#32423;\u0026#21035;\u0026#30340;\u0026#37197;\u0026#32622;\u0026#12290;\u0026#21363;\u0026#21482;\u0026#38656;\u0026#22312;bootstrap.properties\u0026#37197;\u0026#32622;\u0026#25991;\u0026#20214;\u0026#20013;\u0026#28155;\u0026#21152;spring.application.group\u0026#37197;\u0026#32622;\u0026#26469;\u0026#26631;\u0026#35782;\u0026#24212;\u0026#29992;\u0026#25152;\u0026#23646;\u0026#30340;\u0026#20998;\u0026#32452;\u0026#21363;\u0026#21487;\u0026#12290;\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;\u0026#65306;\nspring.application.group=com.infrastructure.alibaba\u0026#36825;\u0026#20010;\u0026#26102;\u0026#20505;\u0026#27880;\u0026#24847;\u0026#22312;\u0026#36731;\u0026#37327;\u0026#29256;\u0026#37197;\u0026#32622;\u0026#20013;\u0026#24515;\u0026#22635;\u0026#20889;\u0026#30340;dataid\u0026#30340;\u0026#26684;\u0026#24335;\u0026#20026;\u0026#65306;\n${spring.application.group}:application.${file-extension}\u0026#22914;\u0026#19979;\u0026#25152;\u0026#31034;:\nGroup: DEFAULT_GROUP DataId: com.infrastructure.alibaba:application.yaml Content: owner.group: infrastructure\u0026#21551;\u0026#21160; Spring Boot \u0026#24212;\u0026#29992;\u0026#27979;\u0026#35797;\u0026#30340;\u0026#20195;\u0026#30721;\u0026#22914;\u0026#19979;\u0026#65306;\n@SpringBootApplication public class ProviderApp { public static void main(String[] args) throws Exception{ ConfigurableApplicationContext applicationContext = SpringApplication.run(ProviderApp.class, args); while (true) { String userName = applicationContext.getEnvironment().getProperty(\"user.name\"); String userAge = applicationContext.getEnvironment().getProperty(\"user.age\"); String deployEnv = applicationContext.getEnvironment().getProperty(\"deploy.env\"); //\u0026#33719;\u0026#21462;\u0026#24403;\u0026#21069;\u0026#24212;\u0026#29992;\u0026#25152;\u0026#23646;\u0026#30340;\u0026#32452; String ownerGroup = applicationContext.getEnvironment().getProperty(\"owner.group\"); System.err.println(\"Deploy Env:\"+deployEnv+\"; in group :\"+ownerGroup+\"\\n \\tuser name :\" + userName + \"; age: \" + userAge); TimeUnit.SECONDS.sleep(1); } } }\u0026#27979;\u0026#35797;\u0026#36755;\u0026#20986;\u0026#30340;\u0026#32467;\u0026#26524;\u0026#22914;\u0026#19979;\u0026#65306;\n2018-11-05 14:34:28.059 INFO 1902 --- [main] com.alibaba.demo.normal.ProviderApp : Started ProviderApp in 15.431 seconds (JVM running for 16.008) Deploy Env:product; in group :Infrastructure user name :yaml-alibaba-update; age: 1020 2018-11-05 14:34:28.109 INFO 1902 --- [gPullingdefault] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4846b0aa: startup date [Mon Nov 05 14:34:28 CST 2018]; root of context hierarchy8.\u0026nbsp;Spring Cloud AliCloud OSS"
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://aliware-os.github.io/spring-cloud-alibaba/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]